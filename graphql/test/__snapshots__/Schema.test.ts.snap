// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Empty schema spec Generated QL schema 1`] = `
"interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type Query {
  node(id: ID!): Node
}
"
`;

exports[`List of strings and references schema spec Generated QL schema 1`] = `
"interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

enum EntityType {
  Foo
  Bar
}

interface Entity implements Node {
  id: ID!
  _name: String!
}

type Foo implements Node & Entity {
  id: ID!
  _name: String!
  strings: [String!]
  bars: [Bar!]
}

type Bar implements Node & Entity {
  id: ID!
  _name: String!
}

interface AdminEntity {
  id: ID!
  _name: String!
  _type: EntityType!
  _version: Int!
  _deleted: Boolean!
}

type AdminEntityEdge {
  node: AdminEntity
  cursor: String!
}

type AdminEntityConnection {
  pageInfo: PageInfo!
  edges: [AdminEntityEdge]
  totalCount: Int!
}

input AdminFilterInput {
  entityTypes: [String]
  referencing: ID
  order: String
}

input AdminReferenceInput {
  id: ID!
}

type AdminEntityVersionInfo {
  version: Int!
  deleted: Boolean!
  published: Boolean!
  createdBy: ID!
  createdAt: String!
}

type AdminEntityHistory {
  id: ID!
  type: EntityType!
  name: String!
  versions: [AdminEntityVersionInfo]!
}

type AdminFoo implements AdminEntity {
  id: ID!
  _type: EntityType!
  _name: String!
  _version: Int!
  _deleted: Boolean!
  strings: [String!]
  bars: [AdminBar!]
}

input AdminFooCreateInput {
  _type: EntityType
  _name: String!
  strings: [String!]
  bars: [AdminReferenceInput!]
}

input AdminFooUpdateInput {
  id: ID!
  _type: EntityType
  _name: String
  strings: [String!]
  bars: [AdminReferenceInput!]
}

type AdminBar implements AdminEntity {
  id: ID!
  _type: EntityType!
  _name: String!
  _version: Int!
  _deleted: Boolean!
}

input AdminBarCreateInput {
  _type: EntityType
  _name: String!
}

input AdminBarUpdateInput {
  id: ID!
  _type: EntityType
  _name: String
}

type Query {
  node(id: ID!): Node
  adminEntity(id: ID!, version: Int): AdminEntity
  adminEntityHistory(id: ID!): AdminEntityHistory
  adminSearchEntities(filter: AdminFilterInput, first: Int, after: String, last: Int, before: String): AdminEntityConnection
}

type Mutation {
  deleteEntity(id: ID!, publish: Boolean!): AdminEntity!
  createFooEntity(entity: AdminFooCreateInput!, publish: Boolean!): AdminFoo!
  updateFooEntity(entity: AdminFooUpdateInput!, publish: Boolean!): AdminFoo!
  createBarEntity(entity: AdminBarCreateInput!, publish: Boolean!): AdminBar!
  updateBarEntity(entity: AdminBarUpdateInput!, publish: Boolean!): AdminBar!
}
"
`;

exports[`Multiple references with entityTypes schema spec Generated QL schema 1`] = `
"interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

enum EntityType {
  Foo
  Bar
  Baz
}

interface Entity implements Node {
  id: ID!
  _name: String!
}

type Foo implements Node & Entity {
  id: ID!
  _name: String!
  noMeansAll: Entity
  bar: Bar
  bazBar: $BarOrBaz
  fooBarBaz: $BarOrBazOrFoo
  barBarBar: Bar
}

type Bar implements Node & Entity {
  id: ID!
  _name: String!
}

type Baz implements Node & Entity {
  id: ID!
  _name: String!
}

interface AdminEntity {
  id: ID!
  _name: String!
  _type: EntityType!
  _version: Int!
  _deleted: Boolean!
}

type AdminEntityEdge {
  node: AdminEntity
  cursor: String!
}

type AdminEntityConnection {
  pageInfo: PageInfo!
  edges: [AdminEntityEdge]
  totalCount: Int!
}

input AdminFilterInput {
  entityTypes: [String]
  referencing: ID
  order: String
}

input AdminReferenceInput {
  id: ID!
}

type AdminEntityVersionInfo {
  version: Int!
  deleted: Boolean!
  published: Boolean!
  createdBy: ID!
  createdAt: String!
}

type AdminEntityHistory {
  id: ID!
  type: EntityType!
  name: String!
  versions: [AdminEntityVersionInfo]!
}

type AdminFoo implements AdminEntity {
  id: ID!
  _type: EntityType!
  _name: String!
  _version: Int!
  _deleted: Boolean!
  noMeansAll: AdminEntity
  bar: AdminBar
  bazBar: $AdminBarOrAdminBaz
  fooBarBaz: $AdminBarOrAdminBazOrAdminFoo
  barBarBar: AdminBar
}

input AdminFooCreateInput {
  _type: EntityType
  _name: String!
  noMeansAll: AdminReferenceInput
  bar: AdminReferenceInput
  bazBar: AdminReferenceInput
  fooBarBaz: AdminReferenceInput
  barBarBar: AdminReferenceInput
}

input AdminFooUpdateInput {
  id: ID!
  _type: EntityType
  _name: String
  noMeansAll: AdminReferenceInput
  bar: AdminReferenceInput
  bazBar: AdminReferenceInput
  fooBarBaz: AdminReferenceInput
  barBarBar: AdminReferenceInput
}

type AdminBar implements AdminEntity {
  id: ID!
  _type: EntityType!
  _name: String!
  _version: Int!
  _deleted: Boolean!
}

input AdminBarCreateInput {
  _type: EntityType
  _name: String!
}

input AdminBarUpdateInput {
  id: ID!
  _type: EntityType
  _name: String
}

type AdminBaz implements AdminEntity {
  id: ID!
  _type: EntityType!
  _name: String!
  _version: Int!
  _deleted: Boolean!
}

input AdminBazCreateInput {
  _type: EntityType
  _name: String!
}

input AdminBazUpdateInput {
  id: ID!
  _type: EntityType
  _name: String
}

enum $BarOrBaz {
  Bar
  Baz
}

enum $BarOrBazOrFoo {
  Bar
  Baz
  Foo
}

enum $AdminBarOrAdminBaz {
  AdminBar
  AdminBaz
}

enum $AdminBarOrAdminBazOrAdminFoo {
  AdminBar
  AdminBaz
  AdminFoo
}

type Query {
  node(id: ID!): Node
  adminEntity(id: ID!, version: Int): AdminEntity
  adminEntityHistory(id: ID!): AdminEntityHistory
  adminSearchEntities(filter: AdminFilterInput, first: Int, after: String, last: Int, before: String): AdminEntityConnection
}

type Mutation {
  deleteEntity(id: ID!, publish: Boolean!): AdminEntity!
  createFooEntity(entity: AdminFooCreateInput!, publish: Boolean!): AdminFoo!
  updateFooEntity(entity: AdminFooUpdateInput!, publish: Boolean!): AdminFoo!
  createBarEntity(entity: AdminBarCreateInput!, publish: Boolean!): AdminBar!
  updateBarEntity(entity: AdminBarUpdateInput!, publish: Boolean!): AdminBar!
  createBazEntity(entity: AdminBazCreateInput!, publish: Boolean!): AdminBaz!
  updateBazEntity(entity: AdminBazUpdateInput!, publish: Boolean!): AdminBaz!
}
"
`;

exports[`One empty entity type schema spec Generated QL schema 1`] = `
"interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

enum EntityType {
  Foo
}

interface Entity implements Node {
  id: ID!
  _name: String!
}

type Foo implements Node & Entity {
  id: ID!
  _name: String!
}

interface AdminEntity {
  id: ID!
  _name: String!
  _type: EntityType!
  _version: Int!
  _deleted: Boolean!
}

type AdminEntityEdge {
  node: AdminEntity
  cursor: String!
}

type AdminEntityConnection {
  pageInfo: PageInfo!
  edges: [AdminEntityEdge]
  totalCount: Int!
}

input AdminFilterInput {
  entityTypes: [String]
  referencing: ID
  order: String
}

input AdminReferenceInput {
  id: ID!
}

type AdminEntityVersionInfo {
  version: Int!
  deleted: Boolean!
  published: Boolean!
  createdBy: ID!
  createdAt: String!
}

type AdminEntityHistory {
  id: ID!
  type: EntityType!
  name: String!
  versions: [AdminEntityVersionInfo]!
}

type AdminFoo implements AdminEntity {
  id: ID!
  _type: EntityType!
  _name: String!
  _version: Int!
  _deleted: Boolean!
}

input AdminFooCreateInput {
  _type: EntityType
  _name: String!
}

input AdminFooUpdateInput {
  id: ID!
  _type: EntityType
  _name: String
}

type Query {
  node(id: ID!): Node
  adminEntity(id: ID!, version: Int): AdminEntity
  adminEntityHistory(id: ID!): AdminEntityHistory
  adminSearchEntities(filter: AdminFilterInput, first: Int, after: String, last: Int, before: String): AdminEntityConnection
}

type Mutation {
  deleteEntity(id: ID!, publish: Boolean!): AdminEntity!
  createFooEntity(entity: AdminFooCreateInput!, publish: Boolean!): AdminFoo!
  updateFooEntity(entity: AdminFooUpdateInput!, publish: Boolean!): AdminFoo!
}
"
`;

exports[`Two entity types with reference schema spec Generated QL schema 1`] = `
"interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

enum EntityType {
  Foo
  Bar
}

interface Entity implements Node {
  id: ID!
  _name: String!
}

type Foo implements Node & Entity {
  id: ID!
  _name: String!
  fooField: String
}

type Bar implements Node & Entity {
  id: ID!
  _name: String!
  barField1: String
  barField2: Entity
}

interface AdminEntity {
  id: ID!
  _name: String!
  _type: EntityType!
  _version: Int!
  _deleted: Boolean!
}

type AdminEntityEdge {
  node: AdminEntity
  cursor: String!
}

type AdminEntityConnection {
  pageInfo: PageInfo!
  edges: [AdminEntityEdge]
  totalCount: Int!
}

input AdminFilterInput {
  entityTypes: [String]
  referencing: ID
  order: String
}

input AdminReferenceInput {
  id: ID!
}

type AdminEntityVersionInfo {
  version: Int!
  deleted: Boolean!
  published: Boolean!
  createdBy: ID!
  createdAt: String!
}

type AdminEntityHistory {
  id: ID!
  type: EntityType!
  name: String!
  versions: [AdminEntityVersionInfo]!
}

type AdminFoo implements AdminEntity {
  id: ID!
  _type: EntityType!
  _name: String!
  _version: Int!
  _deleted: Boolean!
  fooField: String
}

input AdminFooCreateInput {
  _type: EntityType
  _name: String!
  fooField: String
}

input AdminFooUpdateInput {
  id: ID!
  _type: EntityType
  _name: String
  fooField: String
}

type AdminBar implements AdminEntity {
  id: ID!
  _type: EntityType!
  _name: String!
  _version: Int!
  _deleted: Boolean!
  barField1: String
  barField2: AdminEntity
}

input AdminBarCreateInput {
  _type: EntityType
  _name: String!
  barField1: String
  barField2: AdminReferenceInput
}

input AdminBarUpdateInput {
  id: ID!
  _type: EntityType
  _name: String
  barField1: String
  barField2: AdminReferenceInput
}

type Query {
  node(id: ID!): Node
  adminEntity(id: ID!, version: Int): AdminEntity
  adminEntityHistory(id: ID!): AdminEntityHistory
  adminSearchEntities(filter: AdminFilterInput, first: Int, after: String, last: Int, before: String): AdminEntityConnection
}

type Mutation {
  deleteEntity(id: ID!, publish: Boolean!): AdminEntity!
  createFooEntity(entity: AdminFooCreateInput!, publish: Boolean!): AdminFoo!
  updateFooEntity(entity: AdminFooUpdateInput!, publish: Boolean!): AdminFoo!
  createBarEntity(entity: AdminBarCreateInput!, publish: Boolean!): AdminBar!
  updateBarEntity(entity: AdminBarUpdateInput!, publish: Boolean!): AdminBar!
}
"
`;
