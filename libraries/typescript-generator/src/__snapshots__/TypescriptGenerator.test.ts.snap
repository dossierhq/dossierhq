// Vitest Snapshot v1

exports[`generateTypescriptForSchema > Booleans 1`] = `
"import type { AdminClient, AdminEntity } from '@jonasb/datadata-core';

export type AppAdminClient = AdminClient<AllAdminEntities>;

export type AllAdminEntities = AdminBooleans;

export interface AdminBooleansFields {
  boolean: boolean | null;
  booleanList: boolean[] | null;
}

export type AdminBooleans = AdminEntity<'Booleans', AdminBooleansFields>;

export function isAdminBooleans(entity: AdminEntity<string, object>): entity is AdminBooleans {
  return entity.info.type === 'Booleans';
}

export function assertIsAdminBooleans(entity: AdminEntity<string, object>): asserts entity is AdminBooleans {
  if (entity.info.type !== 'Booleans') {
    throw new Error('Expected info.type = Booleans (but was ' + entity.info.type + ')');
  }
}

export type AllAdminValueItems = never;
"
`;

exports[`generateTypescriptForSchema > EntityTypes 1`] = `
"import type { AdminClient, AdminEntity, EntityReference } from '@jonasb/datadata-core';

export type AppAdminClient = AdminClient<AllAdminEntities>;

export type AllAdminEntities = AdminEntityTypes;

export interface AdminEntityTypesFields {
  entityType: EntityReference | null;
  entityTypeList: EntityReference[] | null;
}

export type AdminEntityTypes = AdminEntity<'EntityTypes', AdminEntityTypesFields>;

export function isAdminEntityTypes(entity: AdminEntity<string, object>): entity is AdminEntityTypes {
  return entity.info.type === 'EntityTypes';
}

export function assertIsAdminEntityTypes(entity: AdminEntity<string, object>): asserts entity is AdminEntityTypes {
  if (entity.info.type !== 'EntityTypes') {
    throw new Error('Expected info.type = EntityTypes (but was ' + entity.info.type + ')');
  }
}

export type AllAdminValueItems = never;
"
`;

exports[`generateTypescriptForSchema > Foo (no fields) 1`] = `
"import type { AdminClient, AdminEntity } from '@jonasb/datadata-core';

export type AppAdminClient = AdminClient<AllAdminEntities>;

export type AllAdminEntities = AdminFoo;

export type AdminFooFields = Record<never, never>;

export type AdminFoo = AdminEntity<'Foo', AdminFooFields>;

export function isAdminFoo(entity: AdminEntity<string, object>): entity is AdminFoo {
  return entity.info.type === 'Foo';
}

export function assertIsAdminFoo(entity: AdminEntity<string, object>): asserts entity is AdminFoo {
  if (entity.info.type !== 'Foo') {
    throw new Error('Expected info.type = Foo (but was ' + entity.info.type + ')');
  }
}

export type AllAdminValueItems = never;
"
`;

exports[`generateTypescriptForSchema > Locations 1`] = `
"import type { AdminClient, AdminEntity, Location } from '@jonasb/datadata-core';

export type AppAdminClient = AdminClient<AllAdminEntities>;

export type AllAdminEntities = AdminLocations;

export interface AdminLocationsFields {
  location: Location | null;
  locationList: Location[] | null;
}

export type AdminLocations = AdminEntity<'Locations', AdminLocationsFields>;

export function isAdminLocations(entity: AdminEntity<string, object>): entity is AdminLocations {
  return entity.info.type === 'Locations';
}

export function assertIsAdminLocations(entity: AdminEntity<string, object>): asserts entity is AdminLocations {
  if (entity.info.type !== 'Locations') {
    throw new Error('Expected info.type = Locations (but was ' + entity.info.type + ')');
  }
}

export type AllAdminValueItems = never;
"
`;

exports[`generateTypescriptForSchema > RichTexts 1`] = `
"import type { AdminClient, AdminEntity, RichText } from '@jonasb/datadata-core';

export type AppAdminClient = AdminClient<AllAdminEntities>;

export type AllAdminEntities = AdminRichTexts;

export interface AdminRichTextsFields {
  richText: RichText | null;
  richTextList: RichText[] | null;
}

export type AdminRichTexts = AdminEntity<'RichTexts', AdminRichTextsFields>;

export function isAdminRichTexts(entity: AdminEntity<string, object>): entity is AdminRichTexts {
  return entity.info.type === 'RichTexts';
}

export function assertIsAdminRichTexts(entity: AdminEntity<string, object>): asserts entity is AdminRichTexts {
  if (entity.info.type !== 'RichTexts') {
    throw new Error('Expected info.type = RichTexts (but was ' + entity.info.type + ')');
  }
}

export type AllAdminValueItems = never;
"
`;

exports[`generateTypescriptForSchema > Strings 1`] = `
"import type { AdminClient, AdminEntity } from '@jonasb/datadata-core';

export type AppAdminClient = AdminClient<AllAdminEntities>;

export type AllAdminEntities = AdminStrings;

export interface AdminStringsFields {
  string: string | null;
  stringList: string[] | null;
}

export type AdminStrings = AdminEntity<'Strings', AdminStringsFields>;

export function isAdminStrings(entity: AdminEntity<string, object>): entity is AdminStrings {
  return entity.info.type === 'Strings';
}

export function assertIsAdminStrings(entity: AdminEntity<string, object>): asserts entity is AdminStrings {
  if (entity.info.type !== 'Strings') {
    throw new Error('Expected info.type = Strings (but was ' + entity.info.type + ')');
  }
}

export type AllAdminValueItems = never;
"
`;

exports[`generateTypescriptForSchema > ValueTypes (no fields) 1`] = `
"import type { AdminClient, AdminEntity, ValueItem } from '@jonasb/datadata-core';

export type AppAdminClient = AdminClient<AllAdminEntities>;

export type AllAdminEntities = AdminValueType;

export interface AdminValueTypeFields {
  valueType: AllAdminValueItems | null;
}

export type AdminValueType = AdminEntity<'ValueType', AdminValueTypeFields>;

export function isAdminValueType(entity: AdminEntity<string, object>): entity is AdminValueType {
  return entity.info.type === 'ValueType';
}

export function assertIsAdminValueType(entity: AdminEntity<string, object>): asserts entity is AdminValueType {
  if (entity.info.type !== 'ValueType') {
    throw new Error('Expected info.type = ValueType (but was ' + entity.info.type + ')');
  }
}

export type AllAdminValueItems = AdminFoo;

export type AdminFooFields = Record<never, never>;

export type AdminFoo = ValueItem<'Foo', AdminFooFields>;

export function isAdminFoo(valueItem: ValueItem<string, object> | AdminFoo): valueItem is AdminFoo {
  return valueItem.type === 'Foo';
}

export function assertIsAdminFoo(valueItem: ValueItem<string, object> | AdminFoo): asserts valueItem is AdminFoo {
  if (valueItem.type !== 'Foo') {
    throw new Error('Expected type = Foo (but was ' + valueItem.type + ')');
  }
}
"
`;

exports[`generateTypescriptForSchema > ValueTypes 1`] = `
"import type { AdminClient, AdminEntity, ValueItem } from '@jonasb/datadata-core';

export type AppAdminClient = AdminClient<AllAdminEntities>;

export type AllAdminEntities = AdminValueTypes;

export interface AdminValueTypesFields {
  valueType: AllAdminValueItems | null;
  valueTypeFoo: AdminFoo | null;
  valueTypeFooBar: AdminFoo | AdminBar | null;
  valueTypeList: AllAdminValueItems[] | null;
  valueTypeListFoo: AdminFoo[] | null;
  valueTypeListFooBar: Array<AdminFoo | AdminBar> | null;
}

export type AdminValueTypes = AdminEntity<'ValueTypes', AdminValueTypesFields>;

export function isAdminValueTypes(entity: AdminEntity<string, object>): entity is AdminValueTypes {
  return entity.info.type === 'ValueTypes';
}

export function assertIsAdminValueTypes(entity: AdminEntity<string, object>): asserts entity is AdminValueTypes {
  if (entity.info.type !== 'ValueTypes') {
    throw new Error('Expected info.type = ValueTypes (but was ' + entity.info.type + ')');
  }
}

export type AllAdminValueItems = AdminBar | AdminFoo;

export interface AdminBarFields {
  string: string | null;
}

export type AdminBar = ValueItem<'Bar', AdminBarFields>;

export function isAdminBar(valueItem: ValueItem<string, object> | AdminBar): valueItem is AdminBar {
  return valueItem.type === 'Bar';
}

export function assertIsAdminBar(valueItem: ValueItem<string, object> | AdminBar): asserts valueItem is AdminBar {
  if (valueItem.type !== 'Bar') {
    throw new Error('Expected type = Bar (but was ' + valueItem.type + ')');
  }
}

export interface AdminFooFields {
  string: string | null;
}

export type AdminFoo = ValueItem<'Foo', AdminFooFields>;

export function isAdminFoo(valueItem: ValueItem<string, object> | AdminFoo): valueItem is AdminFoo {
  return valueItem.type === 'Foo';
}

export function assertIsAdminFoo(valueItem: ValueItem<string, object> | AdminFoo): asserts valueItem is AdminFoo {
  if (valueItem.type !== 'Foo') {
    throw new Error('Expected type = Foo (but was ' + valueItem.type + ')');
  }
}
"
`;

exports[`generateTypescriptForSchema > empty 1`] = `
"import type { AdminClient } from '@jonasb/datadata-core';

export type AppAdminClient = AdminClient<AllAdminEntities>;

export type AllAdminEntities = never;

export type AllAdminValueItems = never;
"
`;

exports[`generateTypescriptForSchema published > adminOnly entity type 1`] = `
"import type { PublishedClient } from '@jonasb/datadata-core';

export type AppPublishedClient = PublishedClient<AllPublishedEntities>;

export type AllPublishedEntities = never;

export type AllPublishedValueItems = never;
"
`;

exports[`generateTypescriptForSchema published > adminOnly field 1`] = `
"import type { PublishedClient, PublishedEntity } from '@jonasb/datadata-core';

export type AppPublishedClient = PublishedClient<AllPublishedEntities>;

export type AllPublishedEntities = PublishedFoo;

export type PublishedFooFields = Record<never, never>;

export type PublishedFoo = PublishedEntity<'Foo', PublishedFooFields>;

export function isPublishedFoo(entity: PublishedEntity<string, object>): entity is PublishedFoo {
  return entity.info.type === 'Foo';
}

export function assertIsPublishedFoo(entity: PublishedEntity<string, object>): asserts entity is PublishedFoo {
  if (entity.info.type !== 'Foo') {
    throw new Error('Expected info.type = Foo (but was ' + entity.info.type + ')');
  }
}

export type AllPublishedValueItems = never;
"
`;

exports[`generateTypescriptForSchema published > empty 1`] = `
"import type { PublishedClient } from '@jonasb/datadata-core';

export type AppPublishedClient = PublishedClient<AllPublishedEntities>;

export type AllPublishedEntities = never;

export type AllPublishedValueItems = never;
"
`;

exports[`generateTypescriptForSchema published > required fields 1`] = `
"import type { PublishedClient, PublishedEntity } from '@jonasb/datadata-core';

export type AppPublishedClient = PublishedClient<AllPublishedEntities>;

export type AllPublishedEntities = PublishedFoo;

export interface PublishedFooFields {
  string: string;
  stringList: string[];
}

export type PublishedFoo = PublishedEntity<'Foo', PublishedFooFields>;

export function isPublishedFoo(entity: PublishedEntity<string, object>): entity is PublishedFoo {
  return entity.info.type === 'Foo';
}

export function assertIsPublishedFoo(entity: PublishedEntity<string, object>): asserts entity is PublishedFoo {
  if (entity.info.type !== 'Foo') {
    throw new Error('Expected info.type = Foo (but was ' + entity.info.type + ')');
  }
}

export type AllPublishedValueItems = never;
"
`;
