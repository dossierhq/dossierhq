// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generateTypescriptForSchema > Auth key pattern 1`] = `
"import type { AdminClient, AdminExceptionClient, Entity } from '@dossierhq/core';

export type AppAdminClient = AdminClient<AppEntity, AppComponent, AppUniqueIndexes, AppAdminExceptionClient>;

export type AppAdminExceptionClient = AdminExceptionClient<AppEntity, AppComponent, AppUniqueIndexes>;

export type AppUniqueIndexes = never;

export type AppEntity = Abc;

export type AbcFields = Record<never, never>;

export type Abc = Entity<'Abc', AbcFields, 'a'|'b'|'c'>;

export function isAbc(entity: Entity<string, object>): entity is Abc {
  return entity.info.type === 'Abc';
}

export function assertIsAbc(entity: Entity<string, object>): asserts entity is Abc {
  if (entity.info.type !== 'Abc') {
    throw new Error('Expected info.type = Abc (but was ' + entity.info.type + ')');
  }
}

export type AppComponent = never;
"
`;

exports[`generateTypescriptForSchema > Booleans 1`] = `
"import type { AdminClient, AdminExceptionClient, Entity } from '@dossierhq/core';

export type AppAdminClient = AdminClient<AppEntity, AppComponent, AppUniqueIndexes, AppAdminExceptionClient>;

export type AppAdminExceptionClient = AdminExceptionClient<AppEntity, AppComponent, AppUniqueIndexes>;

export type AppUniqueIndexes = never;

export type AppEntity = Booleans;

export interface BooleansFields {
  boolean: boolean | null;
  booleanList: boolean[] | null;
}

export type Booleans = Entity<'Booleans', BooleansFields, ''>;

export function isBooleans(entity: Entity<string, object>): entity is Booleans {
  return entity.info.type === 'Booleans';
}

export function assertIsBooleans(entity: Entity<string, object>): asserts entity is Booleans {
  if (entity.info.type !== 'Booleans') {
    throw new Error('Expected info.type = Booleans (but was ' + entity.info.type + ')');
  }
}

export type AppComponent = never;
"
`;

exports[`generateTypescriptForSchema > Component (no fields) 1`] = `
"import type { AdminClient, AdminExceptionClient, Component, Entity } from '@dossierhq/core';

export type AppAdminClient = AdminClient<AppEntity, AppComponent, AppUniqueIndexes, AppAdminExceptionClient>;

export type AppAdminExceptionClient = AdminExceptionClient<AppEntity, AppComponent, AppUniqueIndexes>;

export type AppUniqueIndexes = never;

export type AppEntity = Components;

export interface ComponentsFields {
  component: AppComponent | null;
}

export type Components = Entity<'Components', ComponentsFields, ''>;

export function isComponents(entity: Entity<string, object>): entity is Components {
  return entity.info.type === 'Components';
}

export function assertIsComponents(entity: Entity<string, object>): asserts entity is Components {
  if (entity.info.type !== 'Components') {
    throw new Error('Expected info.type = Components (but was ' + entity.info.type + ')');
  }
}

export type AppComponent = Foo;

export type FooFields = Record<never, never>;

export type Foo = Component<'Foo', FooFields>;

export function isFoo(component: Component<string, object> | Foo): component is Foo {
  return component.type === 'Foo';
}

export function assertIsFoo(component: Component<string, object> | Foo): asserts component is Foo {
  if (component.type !== 'Foo') {
    throw new Error('Expected type = Foo (but was ' + component.type + ')');
  }
}
"
`;

exports[`generateTypescriptForSchema > Components 1`] = `
"import type { AdminClient, AdminExceptionClient, Component, Entity } from '@dossierhq/core';

export type AppAdminClient = AdminClient<AppEntity, AppComponent, AppUniqueIndexes, AppAdminExceptionClient>;

export type AppAdminExceptionClient = AdminExceptionClient<AppEntity, AppComponent, AppUniqueIndexes>;

export type AppUniqueIndexes = never;

export type AppEntity = ComponentTypes;

export interface ComponentTypesFields {
  component: AppComponent | null;
  componentFoo: Foo | null;
  componentFooBar: Bar | Foo | null;
  componentList: AppComponent[] | null;
  componentListFoo: Foo[] | null;
  componentListFooBar: (Bar | Foo)[] | null;
}

export type ComponentTypes = Entity<'ComponentTypes', ComponentTypesFields, ''>;

export function isComponentTypes(entity: Entity<string, object>): entity is ComponentTypes {
  return entity.info.type === 'ComponentTypes';
}

export function assertIsComponentTypes(entity: Entity<string, object>): asserts entity is ComponentTypes {
  if (entity.info.type !== 'ComponentTypes') {
    throw new Error('Expected info.type = ComponentTypes (but was ' + entity.info.type + ')');
  }
}

export type AppComponent = Bar | Foo;

export interface BarFields {
  string: string | null;
}

export type Bar = Component<'Bar', BarFields>;

export function isBar(component: Component<string, object> | Bar): component is Bar {
  return component.type === 'Bar';
}

export function assertIsBar(component: Component<string, object> | Bar): asserts component is Bar {
  if (component.type !== 'Bar') {
    throw new Error('Expected type = Bar (but was ' + component.type + ')');
  }
}

export interface FooFields {
  string: string | null;
}

export type Foo = Component<'Foo', FooFields>;

export function isFoo(component: Component<string, object> | Foo): component is Foo {
  return component.type === 'Foo';
}

export function assertIsFoo(component: Component<string, object> | Foo): asserts component is Foo {
  if (component.type !== 'Foo') {
    throw new Error('Expected type = Foo (but was ' + component.type + ')');
  }
}
"
`;

exports[`generateTypescriptForSchema > EntityTypes 1`] = `
"import type { AdminClient, AdminExceptionClient, Entity, EntityReference } from '@dossierhq/core';

export type AppAdminClient = AdminClient<AppEntity, AppComponent, AppUniqueIndexes, AppAdminExceptionClient>;

export type AppAdminExceptionClient = AdminExceptionClient<AppEntity, AppComponent, AppUniqueIndexes>;

export type AppUniqueIndexes = never;

export type AppEntity = EntityTypes;

export interface EntityTypesFields {
  entityType: EntityReference | null;
  entityTypeList: EntityReference[] | null;
}

export type EntityTypes = Entity<'EntityTypes', EntityTypesFields, ''>;

export function isEntityTypes(entity: Entity<string, object>): entity is EntityTypes {
  return entity.info.type === 'EntityTypes';
}

export function assertIsEntityTypes(entity: Entity<string, object>): asserts entity is EntityTypes {
  if (entity.info.type !== 'EntityTypes') {
    throw new Error('Expected info.type = EntityTypes (but was ' + entity.info.type + ')');
  }
}

export type AppComponent = never;
"
`;

exports[`generateTypescriptForSchema > Foo (no fields) 1`] = `
"import type { AdminClient, AdminExceptionClient, Entity } from '@dossierhq/core';

export type AppAdminClient = AdminClient<AppEntity, AppComponent, AppUniqueIndexes, AppAdminExceptionClient>;

export type AppAdminExceptionClient = AdminExceptionClient<AppEntity, AppComponent, AppUniqueIndexes>;

export type AppUniqueIndexes = never;

export type AppEntity = Foo;

export type FooFields = Record<never, never>;

export type Foo = Entity<'Foo', FooFields, ''>;

export function isFoo(entity: Entity<string, object>): entity is Foo {
  return entity.info.type === 'Foo';
}

export function assertIsFoo(entity: Entity<string, object>): asserts entity is Foo {
  if (entity.info.type !== 'Foo') {
    throw new Error('Expected info.type = Foo (but was ' + entity.info.type + ')');
  }
}

export type AppComponent = never;
"
`;

exports[`generateTypescriptForSchema > Locations 1`] = `
"import type { AdminClient, AdminExceptionClient, Entity, Location } from '@dossierhq/core';

export type AppAdminClient = AdminClient<AppEntity, AppComponent, AppUniqueIndexes, AppAdminExceptionClient>;

export type AppAdminExceptionClient = AdminExceptionClient<AppEntity, AppComponent, AppUniqueIndexes>;

export type AppUniqueIndexes = never;

export type AppEntity = Locations;

export interface LocationsFields {
  location: Location | null;
  locationList: Location[] | null;
}

export type Locations = Entity<'Locations', LocationsFields, ''>;

export function isLocations(entity: Entity<string, object>): entity is Locations {
  return entity.info.type === 'Locations';
}

export function assertIsLocations(entity: Entity<string, object>): asserts entity is Locations {
  if (entity.info.type !== 'Locations') {
    throw new Error('Expected info.type = Locations (but was ' + entity.info.type + ')');
  }
}

export type AppComponent = never;
"
`;

exports[`generateTypescriptForSchema > Numbers 1`] = `
"import type { AdminClient, AdminExceptionClient, Entity } from '@dossierhq/core';

export type AppAdminClient = AdminClient<AppEntity, AppComponent, AppUniqueIndexes, AppAdminExceptionClient>;

export type AppAdminExceptionClient = AdminExceptionClient<AppEntity, AppComponent, AppUniqueIndexes>;

export type AppUniqueIndexes = never;

export type AppEntity = Numbers;

export interface NumbersFields {
  number: number | null;
  numberInteger: number | null;
  numberList: number[] | null;
  numberIntegerList: number[] | null;
}

export type Numbers = Entity<'Numbers', NumbersFields, ''>;

export function isNumbers(entity: Entity<string, object>): entity is Numbers {
  return entity.info.type === 'Numbers';
}

export function assertIsNumbers(entity: Entity<string, object>): asserts entity is Numbers {
  if (entity.info.type !== 'Numbers') {
    throw new Error('Expected info.type = Numbers (but was ' + entity.info.type + ')');
  }
}

export type AppComponent = never;
"
`;

exports[`generateTypescriptForSchema > RichTexts 1`] = `
"import type { AdminClient, AdminExceptionClient, Entity, RichText } from '@dossierhq/core';

export type AppAdminClient = AdminClient<AppEntity, AppComponent, AppUniqueIndexes, AppAdminExceptionClient>;

export type AppAdminExceptionClient = AdminExceptionClient<AppEntity, AppComponent, AppUniqueIndexes>;

export type AppUniqueIndexes = never;

export type AppEntity = RichTexts;

export interface RichTextsFields {
  richText: RichText | null;
  richTextList: RichText[] | null;
}

export type RichTexts = Entity<'RichTexts', RichTextsFields, ''>;

export function isRichTexts(entity: Entity<string, object>): entity is RichTexts {
  return entity.info.type === 'RichTexts';
}

export function assertIsRichTexts(entity: Entity<string, object>): asserts entity is RichTexts {
  if (entity.info.type !== 'RichTexts') {
    throw new Error('Expected info.type = RichTexts (but was ' + entity.info.type + ')');
  }
}

export type AppComponent = never;
"
`;

exports[`generateTypescriptForSchema > Strings 1`] = `
"import type { AdminClient, AdminExceptionClient, Entity } from '@dossierhq/core';

export type AppAdminClient = AdminClient<AppEntity, AppComponent, AppUniqueIndexes, AppAdminExceptionClient>;

export type AppAdminExceptionClient = AdminExceptionClient<AppEntity, AppComponent, AppUniqueIndexes>;

export type AppUniqueIndexes = never;

export type AppEntity = Strings;

export interface StringsFields {
  string: string | null;
  stringList: string[] | null;
  values: 'bar' | 'baz' | 'foo' | null;
  valuesList: ('bar' | 'baz' | 'foo')[] | null;
}

export type Strings = Entity<'Strings', StringsFields, ''>;

export function isStrings(entity: Entity<string, object>): entity is Strings {
  return entity.info.type === 'Strings';
}

export function assertIsStrings(entity: Entity<string, object>): asserts entity is Strings {
  if (entity.info.type !== 'Strings') {
    throw new Error('Expected info.type = Strings (but was ' + entity.info.type + ')');
  }
}

export type AppComponent = never;
"
`;

exports[`generateTypescriptForSchema > Unique index 1`] = `
"import type { AdminClient, AdminExceptionClient, Entity } from '@dossierhq/core';

export type AppAdminClient = AdminClient<AppEntity, AppComponent, AppUniqueIndexes, AppAdminExceptionClient>;

export type AppAdminExceptionClient = AdminExceptionClient<AppEntity, AppComponent, AppUniqueIndexes>;

export type AppUniqueIndexes = 'slug';

export type AppEntity = Strings;

export interface StringsFields {
  string: string | null;
}

export type Strings = Entity<'Strings', StringsFields, ''>;

export function isStrings(entity: Entity<string, object>): entity is Strings {
  return entity.info.type === 'Strings';
}

export function assertIsStrings(entity: Entity<string, object>): asserts entity is Strings {
  if (entity.info.type !== 'Strings') {
    throw new Error('Expected info.type = Strings (but was ' + entity.info.type + ')');
  }
}

export type AppComponent = never;
"
`;

exports[`generateTypescriptForSchema > empty 1`] = `
"import type { AdminClient, AdminExceptionClient } from '@dossierhq/core';

export type AppAdminClient = AdminClient<AppEntity, AppComponent, AppUniqueIndexes, AppAdminExceptionClient>;

export type AppAdminExceptionClient = AdminExceptionClient<AppEntity, AppComponent, AppUniqueIndexes>;

export type AppUniqueIndexes = never;

export type AppEntity = never;

export type AppComponent = never;
"
`;

exports[`generateTypescriptForSchema published > Auth key pattern 1`] = `
"import type { PublishedClient, PublishedEntity, PublishedExceptionClient } from '@dossierhq/core';

export type AppPublishedClient = PublishedClient<AppPublishedEntity, AppPublishedComponent, AppPublishedUniqueIndexes, AppPublishedExceptionClient>;

export type AppPublishedExceptionClient = PublishedExceptionClient<AppPublishedEntity, AppPublishedComponent, AppPublishedUniqueIndexes>;

export type AppPublishedUniqueIndexes = never;

export type AppPublishedEntity = PublishedAbc;

export type PublishedAbcFields = Record<never, never>;

export type PublishedAbc = PublishedEntity<'Abc', PublishedAbcFields, 'a'|'b'|'c'>;

export function isPublishedAbc(entity: PublishedEntity<string, object>): entity is PublishedAbc {
  return entity.info.type === 'Abc';
}

export function assertIsPublishedAbc(entity: PublishedEntity<string, object>): asserts entity is PublishedAbc {
  if (entity.info.type !== 'Abc') {
    throw new Error('Expected info.type = Abc (but was ' + entity.info.type + ')');
  }
}

export type AppPublishedComponent = never;
"
`;

exports[`generateTypescriptForSchema published > Unique index 1`] = `
"import type { PublishedClient, PublishedEntity, PublishedExceptionClient } from '@dossierhq/core';

export type AppPublishedClient = PublishedClient<AppPublishedEntity, AppPublishedComponent, AppPublishedUniqueIndexes, AppPublishedExceptionClient>;

export type AppPublishedExceptionClient = PublishedExceptionClient<AppPublishedEntity, AppPublishedComponent, AppPublishedUniqueIndexes>;

export type AppPublishedUniqueIndexes = 'slug';

export type AppPublishedEntity = PublishedStrings;

export interface PublishedStringsFields {
  string: string | null;
}

export type PublishedStrings = PublishedEntity<'Strings', PublishedStringsFields, ''>;

export function isPublishedStrings(entity: PublishedEntity<string, object>): entity is PublishedStrings {
  return entity.info.type === 'Strings';
}

export function assertIsPublishedStrings(entity: PublishedEntity<string, object>): asserts entity is PublishedStrings {
  if (entity.info.type !== 'Strings') {
    throw new Error('Expected info.type = Strings (but was ' + entity.info.type + ')');
  }
}

export type AppPublishedComponent = never;
"
`;

exports[`generateTypescriptForSchema published > adminOnly entity type 1`] = `
"import type { PublishedClient, PublishedExceptionClient } from '@dossierhq/core';

export type AppPublishedClient = PublishedClient<AppPublishedEntity, AppPublishedComponent, AppPublishedUniqueIndexes, AppPublishedExceptionClient>;

export type AppPublishedExceptionClient = PublishedExceptionClient<AppPublishedEntity, AppPublishedComponent, AppPublishedUniqueIndexes>;

export type AppPublishedUniqueIndexes = never;

export type AppPublishedEntity = never;

export type AppPublishedComponent = never;
"
`;

exports[`generateTypescriptForSchema published > adminOnly field 1`] = `
"import type { PublishedClient, PublishedEntity, PublishedExceptionClient } from '@dossierhq/core';

export type AppPublishedClient = PublishedClient<AppPublishedEntity, AppPublishedComponent, AppPublishedUniqueIndexes, AppPublishedExceptionClient>;

export type AppPublishedExceptionClient = PublishedExceptionClient<AppPublishedEntity, AppPublishedComponent, AppPublishedUniqueIndexes>;

export type AppPublishedUniqueIndexes = never;

export type AppPublishedEntity = PublishedFoo;

export type PublishedFooFields = Record<never, never>;

export type PublishedFoo = PublishedEntity<'Foo', PublishedFooFields, ''>;

export function isPublishedFoo(entity: PublishedEntity<string, object>): entity is PublishedFoo {
  return entity.info.type === 'Foo';
}

export function assertIsPublishedFoo(entity: PublishedEntity<string, object>): asserts entity is PublishedFoo {
  if (entity.info.type !== 'Foo') {
    throw new Error('Expected info.type = Foo (but was ' + entity.info.type + ')');
  }
}

export type AppPublishedComponent = never;
"
`;

exports[`generateTypescriptForSchema published > empty 1`] = `
"import type { PublishedClient, PublishedExceptionClient } from '@dossierhq/core';

export type AppPublishedClient = PublishedClient<AppPublishedEntity, AppPublishedComponent, AppPublishedUniqueIndexes, AppPublishedExceptionClient>;

export type AppPublishedExceptionClient = PublishedExceptionClient<AppPublishedEntity, AppPublishedComponent, AppPublishedUniqueIndexes>;

export type AppPublishedUniqueIndexes = never;

export type AppPublishedEntity = never;

export type AppPublishedComponent = never;
"
`;

exports[`generateTypescriptForSchema published > required fields 1`] = `
"import type { PublishedClient, PublishedEntity, PublishedExceptionClient } from '@dossierhq/core';

export type AppPublishedClient = PublishedClient<AppPublishedEntity, AppPublishedComponent, AppPublishedUniqueIndexes, AppPublishedExceptionClient>;

export type AppPublishedExceptionClient = PublishedExceptionClient<AppPublishedEntity, AppPublishedComponent, AppPublishedUniqueIndexes>;

export type AppPublishedUniqueIndexes = never;

export type AppPublishedEntity = PublishedFoo;

export interface PublishedFooFields {
  string: string;
  stringList: string[];
}

export type PublishedFoo = PublishedEntity<'Foo', PublishedFooFields, ''>;

export function isPublishedFoo(entity: PublishedEntity<string, object>): entity is PublishedFoo {
  return entity.info.type === 'Foo';
}

export function assertIsPublishedFoo(entity: PublishedEntity<string, object>): asserts entity is PublishedFoo {
  if (entity.info.type !== 'Foo') {
    throw new Error('Expected info.type = Foo (but was ' + entity.info.type + ')');
  }
}

export type AppPublishedComponent = never;
"
`;
