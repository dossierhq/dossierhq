// Vitest Snapshot v1

exports[`generateTypescriptForSchema > Booleans 1`] = `
"import type { AdminEntity } from '@jonasb/datadata-core';

export interface AdminBooleansFields {
  boolean: boolean | null;
  booleanList: Array<boolean> | null;
}

export type AdminBooleans = AdminEntity<'Booleans', AdminBooleansFields>;

export function isAdminBooleans(entity: AdminEntity | AdminBooleans): entity is AdminBooleans {
  return entity.info.type === 'Booleans';
}

export function assertIsAdminBooleans(entity: AdminEntity | AdminBooleans): asserts entity is AdminBooleans {
  if (entity.info.type !== 'Booleans') {
    throw new Error('Expected info.type = Booleans (but was ' + entity.info.type + ')');
  }
}
"
`;

exports[`generateTypescriptForSchema > EntityTypes 1`] = `
"import type { AdminEntity, EntityReference } from '@jonasb/datadata-core';

export interface AdminEntityTypesFields {
  entityType: EntityReference | null;
  entityTypeList: Array<EntityReference> | null;
}

export type AdminEntityTypes = AdminEntity<'EntityTypes', AdminEntityTypesFields>;

export function isAdminEntityTypes(entity: AdminEntity | AdminEntityTypes): entity is AdminEntityTypes {
  return entity.info.type === 'EntityTypes';
}

export function assertIsAdminEntityTypes(entity: AdminEntity | AdminEntityTypes): asserts entity is AdminEntityTypes {
  if (entity.info.type !== 'EntityTypes') {
    throw new Error('Expected info.type = EntityTypes (but was ' + entity.info.type + ')');
  }
}
"
`;

exports[`generateTypescriptForSchema > Foo (no fields) 1`] = `
"import type { AdminEntity } from '@jonasb/datadata-core';

export type AdminFooFields = Record<never, never>;

export type AdminFoo = AdminEntity<'Foo', AdminFooFields>;

export function isAdminFoo(entity: AdminEntity | AdminFoo): entity is AdminFoo {
  return entity.info.type === 'Foo';
}

export function assertIsAdminFoo(entity: AdminEntity | AdminFoo): asserts entity is AdminFoo {
  if (entity.info.type !== 'Foo') {
    throw new Error('Expected info.type = Foo (but was ' + entity.info.type + ')');
  }
}
"
`;

exports[`generateTypescriptForSchema > Locations 1`] = `
"import type { AdminEntity, Location } from '@jonasb/datadata-core';

export interface AdminLocationsFields {
  location: Location | null;
  locationList: Array<Location> | null;
}

export type AdminLocations = AdminEntity<'Locations', AdminLocationsFields>;

export function isAdminLocations(entity: AdminEntity | AdminLocations): entity is AdminLocations {
  return entity.info.type === 'Locations';
}

export function assertIsAdminLocations(entity: AdminEntity | AdminLocations): asserts entity is AdminLocations {
  if (entity.info.type !== 'Locations') {
    throw new Error('Expected info.type = Locations (but was ' + entity.info.type + ')');
  }
}
"
`;

exports[`generateTypescriptForSchema > RichTexts 1`] = `
"import type { AdminEntity, RichText } from '@jonasb/datadata-core';

export interface AdminRichTextsFields {
  richText: RichText | null;
  richTextList: Array<RichText> | null;
}

export type AdminRichTexts = AdminEntity<'RichTexts', AdminRichTextsFields>;

export function isAdminRichTexts(entity: AdminEntity | AdminRichTexts): entity is AdminRichTexts {
  return entity.info.type === 'RichTexts';
}

export function assertIsAdminRichTexts(entity: AdminEntity | AdminRichTexts): asserts entity is AdminRichTexts {
  if (entity.info.type !== 'RichTexts') {
    throw new Error('Expected info.type = RichTexts (but was ' + entity.info.type + ')');
  }
}
"
`;

exports[`generateTypescriptForSchema > Strings 1`] = `
"import type { AdminEntity } from '@jonasb/datadata-core';

export interface AdminStringsFields {
  string: string | null;
  stringList: Array<string> | null;
}

export type AdminStrings = AdminEntity<'Strings', AdminStringsFields>;

export function isAdminStrings(entity: AdminEntity | AdminStrings): entity is AdminStrings {
  return entity.info.type === 'Strings';
}

export function assertIsAdminStrings(entity: AdminEntity | AdminStrings): asserts entity is AdminStrings {
  if (entity.info.type !== 'Strings') {
    throw new Error('Expected info.type = Strings (but was ' + entity.info.type + ')');
  }
}
"
`;

exports[`generateTypescriptForSchema > ValueTypes (no fields) 1`] = `
"import type { AdminEntity, ValueItem } from '@jonasb/datadata-core';

export interface AdminValueTypeFields {
  valueType: ValueItem | null;
}

export type AdminValueType = AdminEntity<'ValueType', AdminValueTypeFields>;

export function isAdminValueType(entity: AdminEntity | AdminValueType): entity is AdminValueType {
  return entity.info.type === 'ValueType';
}

export function assertIsAdminValueType(entity: AdminEntity | AdminValueType): asserts entity is AdminValueType {
  if (entity.info.type !== 'ValueType') {
    throw new Error('Expected info.type = ValueType (but was ' + entity.info.type + ')');
  }
}

export type AdminFooFields = Record<never, never>;

export type AdminFoo = ValueItem<'Foo', AdminFooFields>;
"
`;

exports[`generateTypescriptForSchema > ValueTypes 1`] = `
"import type { AdminEntity, ValueItem } from '@jonasb/datadata-core';

export interface AdminValueTypesFields {
  valueType: ValueItem | null;
  valueTypeBar: AdminFoo | null;
  valueTypeList: Array<ValueItem> | null;
  valueTypeListBar: Array<AdminFoo> | null;
}

export type AdminValueTypes = AdminEntity<'ValueTypes', AdminValueTypesFields>;

export function isAdminValueTypes(entity: AdminEntity | AdminValueTypes): entity is AdminValueTypes {
  return entity.info.type === 'ValueTypes';
}

export function assertIsAdminValueTypes(entity: AdminEntity | AdminValueTypes): asserts entity is AdminValueTypes {
  if (entity.info.type !== 'ValueTypes') {
    throw new Error('Expected info.type = ValueTypes (but was ' + entity.info.type + ')');
  }
}

export interface AdminFooFields {
  string: string | null;
}

export type AdminFoo = ValueItem<'Foo', AdminFooFields>;
"
`;

exports[`generateTypescriptForSchema > empty 1`] = `""`;

exports[`generateTypescriptForSchema published > adminOnly entity type 1`] = `""`;

exports[`generateTypescriptForSchema published > adminOnly field 1`] = `
"import type { PublishedEntity } from '@jonasb/datadata-core';

export type PublishedFooFields = Record<never, never>;

export type PublishedFoo = PublishedEntity<'Foo', PublishedFooFields>;

export function isPublishedFoo(entity: PublishedEntity | PublishedFoo): entity is PublishedFoo {
  return entity.info.type === 'Foo';
}

export function assertIsPublishedFoo(entity: PublishedEntity | PublishedFoo): asserts entity is PublishedFoo {
  if (entity.info.type !== 'Foo') {
    throw new Error('Expected info.type = Foo (but was ' + entity.info.type + ')');
  }
}
"
`;

exports[`generateTypescriptForSchema published > empty 1`] = `""`;
