// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Empty schema spec Generated QL schema 1`] = `
"interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

scalar Instant

type Query {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]
}
"
`;

exports[`List of strings, booleans, locations and references schema spec Generated QL schema 1`] = `
"interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

scalar Instant

enum EntityType {
  Foo
  Bar
}

type EntityInfo {
  name: String!
}

interface Entity implements Node {
  id: ID!
  info: EntityInfo!
}

type RichText {
  blocksJson: String!
  entities: [Entity]
}

type Location {
  lat: Float!
  lng: Float!
}

input LocationInput {
  lat: Float!
  lng: Float!
}

input BoundingBoxInput {
  minLat: Float!
  maxLat: Float!
  minLng: Float!
  maxLng: Float!
}

type FooFields {
  strings: [String!]
  booleans: [Boolean!]
  locations: [Location!]
  bars: [Bar!]
}

type Foo implements Node & Entity {
  id: ID!
  info: EntityInfo!
  fields: FooFields!
}

type Bar implements Node & Entity {
  id: ID!
  info: EntityInfo!
}

enum EntityPublishState {
  draft
  published
  modified
  withdrawn
  archived
}

type AdminEntityInfo {
  type: EntityType!
  name: String!
  version: Int!
  publishingState: EntityPublishState!
  createdAt: Instant!
  updatedAt: Instant!
}

input AdminEntityCreateInfo {
  type: EntityType
  name: String!
  version: Int
}

enum AdminEntityCreateEffect {
  created
  none
}

input AdminEntityUpdateInfo {
  type: EntityType
  name: String
  version: Int
}

enum AdminEntityUpdateEffect {
  updated
  none
}

input AdminEntityUpsertInfo {
  type: EntityType!
  name: String!
}

enum AdminEntityUpsertEffect {
  created
  updated
  none
}

interface AdminEntity {
  id: ID!
  info: AdminEntityInfo!
}

type AdminEntityEdge {
  node: AdminEntity
  cursor: String!
}

type AdminEntityConnection {
  pageInfo: PageInfo!
  edges: [AdminEntityEdge]
  totalCount: Int!
}

enum QueryOrder {
  createdAt
  updatedAt
  name
}

input AdminQueryInput {
  entityTypes: [EntityType]
  referencing: ID
  boundingBox: BoundingBoxInput
  order: QueryOrder
  text: String
}

input AdminReferenceInput {
  id: ID!
}

input EntityVersionInput {
  id: ID!
  version: Int!
}

type AdminRichText {
  blocksJson: String!
  entities: [AdminEntity]
}

input AdminRichTextInput {
  blocksJson: String!
}

type EntityVersionInfo {
  version: Int!
  published: Boolean!
  createdBy: ID!
  createdAt: Instant!
}

type EntityHistory {
  id: ID!
  versions: [EntityVersionInfo]!
}

type PublishingEvent {
  version: Int
  publishedBy: ID!
  publishedAt: Instant!
}

type PublishingHistory {
  id: ID!
  events: [PublishingEvent]!
}

type EntityPublishPayload {
  id: ID!
  publishState: EntityPublishState!
  updatedAt: Instant!
}

type AdminFooFields {
  strings: [String!]
  booleans: [Boolean!]
  locations: [Location!]
  bars: [AdminBar!]
}

type AdminFoo implements AdminEntity {
  id: ID!
  info: AdminEntityInfo!
  fields: AdminFooFields!
}

input AdminFooFieldsInput {
  strings: [String!]
  booleans: [Boolean!]
  locations: [LocationInput!]
  bars: [AdminReferenceInput!]
}

input AdminFooCreateInput {
  id: ID
  info: AdminEntityCreateInfo!
  fields: AdminFooFieldsInput!
}

type AdminFooCreatePayload {
  effect: AdminEntityCreateEffect!
  entity: AdminFoo!
}

input AdminFooUpdateInput {
  id: ID!
  info: AdminEntityUpdateInfo
  fields: AdminFooFieldsInput!
}

type AdminFooUpdatePayload {
  effect: AdminEntityUpdateEffect!
  entity: AdminFoo!
}

input AdminFooUpsertInput {
  id: ID!
  info: AdminEntityUpsertInfo!
  fields: AdminFooFieldsInput!
}

type AdminFooUpsertPayload {
  effect: AdminEntityUpsertEffect!
  entity: AdminFoo!
}

type AdminBar implements AdminEntity {
  id: ID!
  info: AdminEntityInfo!
}

input AdminBarCreateInput {
  id: ID
  info: AdminEntityCreateInfo!
}

type AdminBarCreatePayload {
  effect: AdminEntityCreateEffect!
  entity: AdminBar!
}

input AdminBarUpdateInput {
  id: ID!
  info: AdminEntityUpdateInfo
}

type AdminBarUpdatePayload {
  effect: AdminEntityUpdateEffect!
  entity: AdminBar!
}

input AdminBarUpsertInput {
  id: ID!
  info: AdminEntityUpsertInfo!
}

type AdminBarUpsertPayload {
  effect: AdminEntityUpsertEffect!
  entity: AdminBar!
}

type Query {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]
  adminEntity(id: ID!, version: Int): AdminEntity
  adminEntities(ids: [ID!]!): [AdminEntity]
  adminSearchEntities(query: AdminQueryInput, first: Int, after: String, last: Int, before: String): AdminEntityConnection
  entityHistory(id: ID!): EntityHistory
  publishingHistory(id: ID!): PublishingHistory
}

type Mutation {
  publishEntities(entities: [EntityVersionInput!]!): [EntityPublishPayload!]
  unpublishEntities(ids: [ID!]!): [EntityPublishPayload!]
  archiveEntity(id: ID!): EntityPublishPayload
  unarchiveEntity(id: ID!): EntityPublishPayload
  createFooEntity(entity: AdminFooCreateInput!): AdminFooCreatePayload
  updateFooEntity(entity: AdminFooUpdateInput!): AdminFooUpdatePayload
  upsertFooEntity(entity: AdminFooUpsertInput!): AdminFooUpsertPayload
  createBarEntity(entity: AdminBarCreateInput!): AdminBarCreatePayload
  updateBarEntity(entity: AdminBarUpdateInput!): AdminBarUpdatePayload
  upsertBarEntity(entity: AdminBarUpsertInput!): AdminBarUpsertPayload
}
"
`;

exports[`Multiple references with entityTypes schema spec Generated QL schema 1`] = `
"interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

scalar Instant

enum EntityType {
  Foo
  Bar
  Baz
}

type EntityInfo {
  name: String!
}

interface Entity implements Node {
  id: ID!
  info: EntityInfo!
}

type RichText {
  blocksJson: String!
  entities: [Entity]
}

type Location {
  lat: Float!
  lng: Float!
}

input LocationInput {
  lat: Float!
  lng: Float!
}

input BoundingBoxInput {
  minLat: Float!
  maxLat: Float!
  minLng: Float!
  maxLng: Float!
}

type FooFields {
  noMeansAll: Entity
  bar: Bar
  bazBar: _BarOrBaz
  fooBarBaz: _BarOrBazOrFoo
  barBarBar: Bar
}

type Foo implements Node & Entity {
  id: ID!
  info: EntityInfo!
  fields: FooFields!
}

type Bar implements Node & Entity {
  id: ID!
  info: EntityInfo!
}

type Baz implements Node & Entity {
  id: ID!
  info: EntityInfo!
}

enum EntityPublishState {
  draft
  published
  modified
  withdrawn
  archived
}

type AdminEntityInfo {
  type: EntityType!
  name: String!
  version: Int!
  publishingState: EntityPublishState!
  createdAt: Instant!
  updatedAt: Instant!
}

input AdminEntityCreateInfo {
  type: EntityType
  name: String!
  version: Int
}

enum AdminEntityCreateEffect {
  created
  none
}

input AdminEntityUpdateInfo {
  type: EntityType
  name: String
  version: Int
}

enum AdminEntityUpdateEffect {
  updated
  none
}

input AdminEntityUpsertInfo {
  type: EntityType!
  name: String!
}

enum AdminEntityUpsertEffect {
  created
  updated
  none
}

interface AdminEntity {
  id: ID!
  info: AdminEntityInfo!
}

type AdminEntityEdge {
  node: AdminEntity
  cursor: String!
}

type AdminEntityConnection {
  pageInfo: PageInfo!
  edges: [AdminEntityEdge]
  totalCount: Int!
}

enum QueryOrder {
  createdAt
  updatedAt
  name
}

input AdminQueryInput {
  entityTypes: [EntityType]
  referencing: ID
  boundingBox: BoundingBoxInput
  order: QueryOrder
  text: String
}

input AdminReferenceInput {
  id: ID!
}

input EntityVersionInput {
  id: ID!
  version: Int!
}

type AdminRichText {
  blocksJson: String!
  entities: [AdminEntity]
}

input AdminRichTextInput {
  blocksJson: String!
}

type EntityVersionInfo {
  version: Int!
  published: Boolean!
  createdBy: ID!
  createdAt: Instant!
}

type EntityHistory {
  id: ID!
  versions: [EntityVersionInfo]!
}

type PublishingEvent {
  version: Int
  publishedBy: ID!
  publishedAt: Instant!
}

type PublishingHistory {
  id: ID!
  events: [PublishingEvent]!
}

type EntityPublishPayload {
  id: ID!
  publishState: EntityPublishState!
  updatedAt: Instant!
}

type AdminFooFields {
  noMeansAll: AdminEntity
  bar: AdminBar
  bazBar: _AdminBarOrBaz
  fooBarBaz: _AdminBarOrBazOrFoo
  barBarBar: AdminBar
}

type AdminFoo implements AdminEntity {
  id: ID!
  info: AdminEntityInfo!
  fields: AdminFooFields!
}

input AdminFooFieldsInput {
  noMeansAll: AdminReferenceInput
  bar: AdminReferenceInput
  bazBar: AdminReferenceInput
  fooBarBaz: AdminReferenceInput
  barBarBar: AdminReferenceInput
}

input AdminFooCreateInput {
  id: ID
  info: AdminEntityCreateInfo!
  fields: AdminFooFieldsInput!
}

type AdminFooCreatePayload {
  effect: AdminEntityCreateEffect!
  entity: AdminFoo!
}

input AdminFooUpdateInput {
  id: ID!
  info: AdminEntityUpdateInfo
  fields: AdminFooFieldsInput!
}

type AdminFooUpdatePayload {
  effect: AdminEntityUpdateEffect!
  entity: AdminFoo!
}

input AdminFooUpsertInput {
  id: ID!
  info: AdminEntityUpsertInfo!
  fields: AdminFooFieldsInput!
}

type AdminFooUpsertPayload {
  effect: AdminEntityUpsertEffect!
  entity: AdminFoo!
}

type AdminBar implements AdminEntity {
  id: ID!
  info: AdminEntityInfo!
}

input AdminBarCreateInput {
  id: ID
  info: AdminEntityCreateInfo!
}

type AdminBarCreatePayload {
  effect: AdminEntityCreateEffect!
  entity: AdminBar!
}

input AdminBarUpdateInput {
  id: ID!
  info: AdminEntityUpdateInfo
}

type AdminBarUpdatePayload {
  effect: AdminEntityUpdateEffect!
  entity: AdminBar!
}

input AdminBarUpsertInput {
  id: ID!
  info: AdminEntityUpsertInfo!
}

type AdminBarUpsertPayload {
  effect: AdminEntityUpsertEffect!
  entity: AdminBar!
}

type AdminBaz implements AdminEntity {
  id: ID!
  info: AdminEntityInfo!
}

input AdminBazCreateInput {
  id: ID
  info: AdminEntityCreateInfo!
}

type AdminBazCreatePayload {
  effect: AdminEntityCreateEffect!
  entity: AdminBaz!
}

input AdminBazUpdateInput {
  id: ID!
  info: AdminEntityUpdateInfo
}

type AdminBazUpdatePayload {
  effect: AdminEntityUpdateEffect!
  entity: AdminBaz!
}

input AdminBazUpsertInput {
  id: ID!
  info: AdminEntityUpsertInfo!
}

type AdminBazUpsertPayload {
  effect: AdminEntityUpsertEffect!
  entity: AdminBaz!
}

enum _BarOrBaz {
  Bar
  Baz
}

enum _BarOrBazOrFoo {
  Bar
  Baz
  Foo
}

enum _AdminBarOrBaz {
  AdminBar
  AdminBaz
}

enum _AdminBarOrBazOrFoo {
  AdminBar
  AdminBaz
  AdminFoo
}

type Query {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]
  adminEntity(id: ID!, version: Int): AdminEntity
  adminEntities(ids: [ID!]!): [AdminEntity]
  adminSearchEntities(query: AdminQueryInput, first: Int, after: String, last: Int, before: String): AdminEntityConnection
  entityHistory(id: ID!): EntityHistory
  publishingHistory(id: ID!): PublishingHistory
}

type Mutation {
  publishEntities(entities: [EntityVersionInput!]!): [EntityPublishPayload!]
  unpublishEntities(ids: [ID!]!): [EntityPublishPayload!]
  archiveEntity(id: ID!): EntityPublishPayload
  unarchiveEntity(id: ID!): EntityPublishPayload
  createFooEntity(entity: AdminFooCreateInput!): AdminFooCreatePayload
  updateFooEntity(entity: AdminFooUpdateInput!): AdminFooUpdatePayload
  upsertFooEntity(entity: AdminFooUpsertInput!): AdminFooUpsertPayload
  createBarEntity(entity: AdminBarCreateInput!): AdminBarCreatePayload
  updateBarEntity(entity: AdminBarUpdateInput!): AdminBarUpdatePayload
  upsertBarEntity(entity: AdminBarUpsertInput!): AdminBarUpsertPayload
  createBazEntity(entity: AdminBazCreateInput!): AdminBazCreatePayload
  updateBazEntity(entity: AdminBazUpdateInput!): AdminBazUpdatePayload
  upsertBazEntity(entity: AdminBazUpsertInput!): AdminBazUpsertPayload
}
"
`;

exports[`One empty entity type schema spec Generated QL schema 1`] = `
"interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

scalar Instant

enum EntityType {
  Foo
}

type EntityInfo {
  name: String!
}

interface Entity implements Node {
  id: ID!
  info: EntityInfo!
}

type RichText {
  blocksJson: String!
  entities: [Entity]
}

type Location {
  lat: Float!
  lng: Float!
}

input LocationInput {
  lat: Float!
  lng: Float!
}

input BoundingBoxInput {
  minLat: Float!
  maxLat: Float!
  minLng: Float!
  maxLng: Float!
}

type Foo implements Node & Entity {
  id: ID!
  info: EntityInfo!
}

enum EntityPublishState {
  draft
  published
  modified
  withdrawn
  archived
}

type AdminEntityInfo {
  type: EntityType!
  name: String!
  version: Int!
  publishingState: EntityPublishState!
  createdAt: Instant!
  updatedAt: Instant!
}

input AdminEntityCreateInfo {
  type: EntityType
  name: String!
  version: Int
}

enum AdminEntityCreateEffect {
  created
  none
}

input AdminEntityUpdateInfo {
  type: EntityType
  name: String
  version: Int
}

enum AdminEntityUpdateEffect {
  updated
  none
}

input AdminEntityUpsertInfo {
  type: EntityType!
  name: String!
}

enum AdminEntityUpsertEffect {
  created
  updated
  none
}

interface AdminEntity {
  id: ID!
  info: AdminEntityInfo!
}

type AdminEntityEdge {
  node: AdminEntity
  cursor: String!
}

type AdminEntityConnection {
  pageInfo: PageInfo!
  edges: [AdminEntityEdge]
  totalCount: Int!
}

enum QueryOrder {
  createdAt
  updatedAt
  name
}

input AdminQueryInput {
  entityTypes: [EntityType]
  referencing: ID
  boundingBox: BoundingBoxInput
  order: QueryOrder
  text: String
}

input AdminReferenceInput {
  id: ID!
}

input EntityVersionInput {
  id: ID!
  version: Int!
}

type AdminRichText {
  blocksJson: String!
  entities: [AdminEntity]
}

input AdminRichTextInput {
  blocksJson: String!
}

type EntityVersionInfo {
  version: Int!
  published: Boolean!
  createdBy: ID!
  createdAt: Instant!
}

type EntityHistory {
  id: ID!
  versions: [EntityVersionInfo]!
}

type PublishingEvent {
  version: Int
  publishedBy: ID!
  publishedAt: Instant!
}

type PublishingHistory {
  id: ID!
  events: [PublishingEvent]!
}

type EntityPublishPayload {
  id: ID!
  publishState: EntityPublishState!
  updatedAt: Instant!
}

type AdminFoo implements AdminEntity {
  id: ID!
  info: AdminEntityInfo!
}

input AdminFooCreateInput {
  id: ID
  info: AdminEntityCreateInfo!
}

type AdminFooCreatePayload {
  effect: AdminEntityCreateEffect!
  entity: AdminFoo!
}

input AdminFooUpdateInput {
  id: ID!
  info: AdminEntityUpdateInfo
}

type AdminFooUpdatePayload {
  effect: AdminEntityUpdateEffect!
  entity: AdminFoo!
}

input AdminFooUpsertInput {
  id: ID!
  info: AdminEntityUpsertInfo!
}

type AdminFooUpsertPayload {
  effect: AdminEntityUpsertEffect!
  entity: AdminFoo!
}

type Query {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]
  adminEntity(id: ID!, version: Int): AdminEntity
  adminEntities(ids: [ID!]!): [AdminEntity]
  adminSearchEntities(query: AdminQueryInput, first: Int, after: String, last: Int, before: String): AdminEntityConnection
  entityHistory(id: ID!): EntityHistory
  publishingHistory(id: ID!): PublishingHistory
}

type Mutation {
  publishEntities(entities: [EntityVersionInput!]!): [EntityPublishPayload!]
  unpublishEntities(ids: [ID!]!): [EntityPublishPayload!]
  archiveEntity(id: ID!): EntityPublishPayload
  unarchiveEntity(id: ID!): EntityPublishPayload
  createFooEntity(entity: AdminFooCreateInput!): AdminFooCreatePayload
  updateFooEntity(entity: AdminFooUpdateInput!): AdminFooUpdatePayload
  upsertFooEntity(entity: AdminFooUpsertInput!): AdminFooUpsertPayload
}
"
`;

exports[`Rich text schema spec Generated QL schema 1`] = `
"interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

scalar Instant

enum EntityType {
  Foo
}

type EntityInfo {
  name: String!
}

interface Entity implements Node {
  id: ID!
  info: EntityInfo!
}

type RichText {
  blocksJson: String!
  entities: [Entity]
}

type Location {
  lat: Float!
  lng: Float!
}

input LocationInput {
  lat: Float!
  lng: Float!
}

input BoundingBoxInput {
  minLat: Float!
  maxLat: Float!
  minLng: Float!
  maxLng: Float!
}

type FooFields {
  body: RichText
}

type Foo implements Node & Entity {
  id: ID!
  info: EntityInfo!
  fields: FooFields!
}

enum EntityPublishState {
  draft
  published
  modified
  withdrawn
  archived
}

type AdminEntityInfo {
  type: EntityType!
  name: String!
  version: Int!
  publishingState: EntityPublishState!
  createdAt: Instant!
  updatedAt: Instant!
}

input AdminEntityCreateInfo {
  type: EntityType
  name: String!
  version: Int
}

enum AdminEntityCreateEffect {
  created
  none
}

input AdminEntityUpdateInfo {
  type: EntityType
  name: String
  version: Int
}

enum AdminEntityUpdateEffect {
  updated
  none
}

input AdminEntityUpsertInfo {
  type: EntityType!
  name: String!
}

enum AdminEntityUpsertEffect {
  created
  updated
  none
}

interface AdminEntity {
  id: ID!
  info: AdminEntityInfo!
}

type AdminEntityEdge {
  node: AdminEntity
  cursor: String!
}

type AdminEntityConnection {
  pageInfo: PageInfo!
  edges: [AdminEntityEdge]
  totalCount: Int!
}

enum QueryOrder {
  createdAt
  updatedAt
  name
}

input AdminQueryInput {
  entityTypes: [EntityType]
  referencing: ID
  boundingBox: BoundingBoxInput
  order: QueryOrder
  text: String
}

input AdminReferenceInput {
  id: ID!
}

input EntityVersionInput {
  id: ID!
  version: Int!
}

type AdminRichText {
  blocksJson: String!
  entities: [AdminEntity]
}

input AdminRichTextInput {
  blocksJson: String!
}

type EntityVersionInfo {
  version: Int!
  published: Boolean!
  createdBy: ID!
  createdAt: Instant!
}

type EntityHistory {
  id: ID!
  versions: [EntityVersionInfo]!
}

type PublishingEvent {
  version: Int
  publishedBy: ID!
  publishedAt: Instant!
}

type PublishingHistory {
  id: ID!
  events: [PublishingEvent]!
}

type EntityPublishPayload {
  id: ID!
  publishState: EntityPublishState!
  updatedAt: Instant!
}

type AdminFooFields {
  body: AdminRichText
}

type AdminFoo implements AdminEntity {
  id: ID!
  info: AdminEntityInfo!
  fields: AdminFooFields!
}

input AdminFooFieldsInput {
  body: AdminRichTextInput
}

input AdminFooCreateInput {
  id: ID
  info: AdminEntityCreateInfo!
  fields: AdminFooFieldsInput!
}

type AdminFooCreatePayload {
  effect: AdminEntityCreateEffect!
  entity: AdminFoo!
}

input AdminFooUpdateInput {
  id: ID!
  info: AdminEntityUpdateInfo
  fields: AdminFooFieldsInput!
}

type AdminFooUpdatePayload {
  effect: AdminEntityUpdateEffect!
  entity: AdminFoo!
}

input AdminFooUpsertInput {
  id: ID!
  info: AdminEntityUpsertInfo!
  fields: AdminFooFieldsInput!
}

type AdminFooUpsertPayload {
  effect: AdminEntityUpsertEffect!
  entity: AdminFoo!
}

type Query {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]
  adminEntity(id: ID!, version: Int): AdminEntity
  adminEntities(ids: [ID!]!): [AdminEntity]
  adminSearchEntities(query: AdminQueryInput, first: Int, after: String, last: Int, before: String): AdminEntityConnection
  entityHistory(id: ID!): EntityHistory
  publishingHistory(id: ID!): PublishingHistory
}

type Mutation {
  publishEntities(entities: [EntityVersionInput!]!): [EntityPublishPayload!]
  unpublishEntities(ids: [ID!]!): [EntityPublishPayload!]
  archiveEntity(id: ID!): EntityPublishPayload
  unarchiveEntity(id: ID!): EntityPublishPayload
  createFooEntity(entity: AdminFooCreateInput!): AdminFooCreatePayload
  updateFooEntity(entity: AdminFooUpdateInput!): AdminFooUpdatePayload
  upsertFooEntity(entity: AdminFooUpsertInput!): AdminFooUpsertPayload
}
"
`;

exports[`Two entity types with reference schema spec Generated QL schema 1`] = `
"interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

scalar Instant

enum EntityType {
  Foo
  Bar
}

type EntityInfo {
  name: String!
}

interface Entity implements Node {
  id: ID!
  info: EntityInfo!
}

type RichText {
  blocksJson: String!
  entities: [Entity]
}

type Location {
  lat: Float!
  lng: Float!
}

input LocationInput {
  lat: Float!
  lng: Float!
}

input BoundingBoxInput {
  minLat: Float!
  maxLat: Float!
  minLng: Float!
  maxLng: Float!
}

type FooFields {
  fooField: String
}

type Foo implements Node & Entity {
  id: ID!
  info: EntityInfo!
  fields: FooFields!
}

type BarFields {
  barField1: String
  barField2: Entity
  barField3: Location
  barField4: Boolean
}

type Bar implements Node & Entity {
  id: ID!
  info: EntityInfo!
  fields: BarFields!
}

enum EntityPublishState {
  draft
  published
  modified
  withdrawn
  archived
}

type AdminEntityInfo {
  type: EntityType!
  name: String!
  version: Int!
  publishingState: EntityPublishState!
  createdAt: Instant!
  updatedAt: Instant!
}

input AdminEntityCreateInfo {
  type: EntityType
  name: String!
  version: Int
}

enum AdminEntityCreateEffect {
  created
  none
}

input AdminEntityUpdateInfo {
  type: EntityType
  name: String
  version: Int
}

enum AdminEntityUpdateEffect {
  updated
  none
}

input AdminEntityUpsertInfo {
  type: EntityType!
  name: String!
}

enum AdminEntityUpsertEffect {
  created
  updated
  none
}

interface AdminEntity {
  id: ID!
  info: AdminEntityInfo!
}

type AdminEntityEdge {
  node: AdminEntity
  cursor: String!
}

type AdminEntityConnection {
  pageInfo: PageInfo!
  edges: [AdminEntityEdge]
  totalCount: Int!
}

enum QueryOrder {
  createdAt
  updatedAt
  name
}

input AdminQueryInput {
  entityTypes: [EntityType]
  referencing: ID
  boundingBox: BoundingBoxInput
  order: QueryOrder
  text: String
}

input AdminReferenceInput {
  id: ID!
}

input EntityVersionInput {
  id: ID!
  version: Int!
}

type AdminRichText {
  blocksJson: String!
  entities: [AdminEntity]
}

input AdminRichTextInput {
  blocksJson: String!
}

type EntityVersionInfo {
  version: Int!
  published: Boolean!
  createdBy: ID!
  createdAt: Instant!
}

type EntityHistory {
  id: ID!
  versions: [EntityVersionInfo]!
}

type PublishingEvent {
  version: Int
  publishedBy: ID!
  publishedAt: Instant!
}

type PublishingHistory {
  id: ID!
  events: [PublishingEvent]!
}

type EntityPublishPayload {
  id: ID!
  publishState: EntityPublishState!
  updatedAt: Instant!
}

type AdminFooFields {
  fooField: String
}

type AdminFoo implements AdminEntity {
  id: ID!
  info: AdminEntityInfo!
  fields: AdminFooFields!
}

input AdminFooFieldsInput {
  fooField: String
}

input AdminFooCreateInput {
  id: ID
  info: AdminEntityCreateInfo!
  fields: AdminFooFieldsInput!
}

type AdminFooCreatePayload {
  effect: AdminEntityCreateEffect!
  entity: AdminFoo!
}

input AdminFooUpdateInput {
  id: ID!
  info: AdminEntityUpdateInfo
  fields: AdminFooFieldsInput!
}

type AdminFooUpdatePayload {
  effect: AdminEntityUpdateEffect!
  entity: AdminFoo!
}

input AdminFooUpsertInput {
  id: ID!
  info: AdminEntityUpsertInfo!
  fields: AdminFooFieldsInput!
}

type AdminFooUpsertPayload {
  effect: AdminEntityUpsertEffect!
  entity: AdminFoo!
}

type AdminBarFields {
  barField1: String
  barField2: AdminEntity
  barField3: Location
  barField4: Boolean
}

type AdminBar implements AdminEntity {
  id: ID!
  info: AdminEntityInfo!
  fields: AdminBarFields!
}

input AdminBarFieldsInput {
  barField1: String
  barField2: AdminReferenceInput
  barField3: LocationInput
  barField4: Boolean
}

input AdminBarCreateInput {
  id: ID
  info: AdminEntityCreateInfo!
  fields: AdminBarFieldsInput!
}

type AdminBarCreatePayload {
  effect: AdminEntityCreateEffect!
  entity: AdminBar!
}

input AdminBarUpdateInput {
  id: ID!
  info: AdminEntityUpdateInfo
  fields: AdminBarFieldsInput!
}

type AdminBarUpdatePayload {
  effect: AdminEntityUpdateEffect!
  entity: AdminBar!
}

input AdminBarUpsertInput {
  id: ID!
  info: AdminEntityUpsertInfo!
  fields: AdminBarFieldsInput!
}

type AdminBarUpsertPayload {
  effect: AdminEntityUpsertEffect!
  entity: AdminBar!
}

type Query {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]
  adminEntity(id: ID!, version: Int): AdminEntity
  adminEntities(ids: [ID!]!): [AdminEntity]
  adminSearchEntities(query: AdminQueryInput, first: Int, after: String, last: Int, before: String): AdminEntityConnection
  entityHistory(id: ID!): EntityHistory
  publishingHistory(id: ID!): PublishingHistory
}

type Mutation {
  publishEntities(entities: [EntityVersionInput!]!): [EntityPublishPayload!]
  unpublishEntities(ids: [ID!]!): [EntityPublishPayload!]
  archiveEntity(id: ID!): EntityPublishPayload
  unarchiveEntity(id: ID!): EntityPublishPayload
  createFooEntity(entity: AdminFooCreateInput!): AdminFooCreatePayload
  updateFooEntity(entity: AdminFooUpdateInput!): AdminFooUpdatePayload
  upsertFooEntity(entity: AdminFooUpsertInput!): AdminFooUpsertPayload
  createBarEntity(entity: AdminBarCreateInput!): AdminBarCreatePayload
  updateBarEntity(entity: AdminBarUpdateInput!): AdminBarUpdatePayload
  upsertBarEntity(entity: AdminBarUpsertInput!): AdminBarUpsertPayload
}
"
`;

exports[`Value type schema spec Generated QL schema 1`] = `
"interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

scalar Instant

enum EntityType {
  Foo
  Bar
}

type EntityInfo {
  name: String!
}

interface Entity implements Node {
  id: ID!
  info: EntityInfo!
}

enum ValueType {
  ValueOne
  ValueList
  NestedValue
}

interface Value {
  type: ValueType!
}

type RichText {
  blocksJson: String!
  entities: [Entity]
}

type Location {
  lat: Float!
  lng: Float!
}

input LocationInput {
  lat: Float!
  lng: Float!
}

input BoundingBoxInput {
  minLat: Float!
  maxLat: Float!
  minLng: Float!
  maxLng: Float!
}

type FooFields {
  valueOne: ValueOne
  unspecifiedValue: Value
  valueOneOrList: _ValueListOrValueOne
  nestedValue: NestedValue
}

type Foo implements Node & Entity {
  id: ID!
  info: EntityInfo!
  fields: FooFields!
}

type Bar implements Node & Entity {
  id: ID!
  info: EntityInfo!
}

type ValueOne implements Value {
  type: ValueType!
  one: String
  two: Bar
  three: Location
  four: Boolean
}

type ValueList implements Value {
  type: ValueType!
  one: [String!]
  two: [Bar!]
  three: [Location!]
  four: [Boolean!]
}

type NestedValue implements Value {
  type: ValueType!
  text: String
  child: NestedValue
}

enum EntityPublishState {
  draft
  published
  modified
  withdrawn
  archived
}

type AdminEntityInfo {
  type: EntityType!
  name: String!
  version: Int!
  publishingState: EntityPublishState!
  createdAt: Instant!
  updatedAt: Instant!
}

input AdminEntityCreateInfo {
  type: EntityType
  name: String!
  version: Int
}

enum AdminEntityCreateEffect {
  created
  none
}

input AdminEntityUpdateInfo {
  type: EntityType
  name: String
  version: Int
}

enum AdminEntityUpdateEffect {
  updated
  none
}

input AdminEntityUpsertInfo {
  type: EntityType!
  name: String!
}

enum AdminEntityUpsertEffect {
  created
  updated
  none
}

interface AdminEntity {
  id: ID!
  info: AdminEntityInfo!
}

type AdminEntityEdge {
  node: AdminEntity
  cursor: String!
}

type AdminEntityConnection {
  pageInfo: PageInfo!
  edges: [AdminEntityEdge]
  totalCount: Int!
}

enum QueryOrder {
  createdAt
  updatedAt
  name
}

input AdminQueryInput {
  entityTypes: [EntityType]
  referencing: ID
  boundingBox: BoundingBoxInput
  order: QueryOrder
  text: String
}

input AdminReferenceInput {
  id: ID!
}

input EntityVersionInput {
  id: ID!
  version: Int!
}

interface AdminValue {
  type: ValueType!
}

type AdminRichText {
  blocksJson: String!
  entities: [AdminEntity]
}

input AdminRichTextInput {
  blocksJson: String!
}

type EntityVersionInfo {
  version: Int!
  published: Boolean!
  createdBy: ID!
  createdAt: Instant!
}

type EntityHistory {
  id: ID!
  versions: [EntityVersionInfo]!
}

type PublishingEvent {
  version: Int
  publishedBy: ID!
  publishedAt: Instant!
}

type PublishingHistory {
  id: ID!
  events: [PublishingEvent]!
}

type EntityPublishPayload {
  id: ID!
  publishState: EntityPublishState!
  updatedAt: Instant!
}

type AdminFooFields {
  valueOne: AdminValueOne
  unspecifiedValue: AdminValue
  valueOneOrList: _AdminValueListOrValueOne
  nestedValue: AdminNestedValue
}

type AdminFoo implements AdminEntity {
  id: ID!
  info: AdminEntityInfo!
  fields: AdminFooFields!
}

input AdminFooFieldsInput {
  valueOneJson: String
  valueOne: AdminValueOneInput
  unspecifiedValueJson: String
  valueOneOrListJson: String
  nestedValueJson: String
  nestedValue: AdminNestedValueInput
}

input AdminFooCreateInput {
  id: ID
  info: AdminEntityCreateInfo!
  fields: AdminFooFieldsInput!
}

type AdminFooCreatePayload {
  effect: AdminEntityCreateEffect!
  entity: AdminFoo!
}

input AdminFooUpdateInput {
  id: ID!
  info: AdminEntityUpdateInfo
  fields: AdminFooFieldsInput!
}

type AdminFooUpdatePayload {
  effect: AdminEntityUpdateEffect!
  entity: AdminFoo!
}

input AdminFooUpsertInput {
  id: ID!
  info: AdminEntityUpsertInfo!
  fields: AdminFooFieldsInput!
}

type AdminFooUpsertPayload {
  effect: AdminEntityUpsertEffect!
  entity: AdminFoo!
}

type AdminBar implements AdminEntity {
  id: ID!
  info: AdminEntityInfo!
}

input AdminBarCreateInput {
  id: ID
  info: AdminEntityCreateInfo!
}

type AdminBarCreatePayload {
  effect: AdminEntityCreateEffect!
  entity: AdminBar!
}

input AdminBarUpdateInput {
  id: ID!
  info: AdminEntityUpdateInfo
}

type AdminBarUpdatePayload {
  effect: AdminEntityUpdateEffect!
  entity: AdminBar!
}

input AdminBarUpsertInput {
  id: ID!
  info: AdminEntityUpsertInfo!
}

type AdminBarUpsertPayload {
  effect: AdminEntityUpsertEffect!
  entity: AdminBar!
}

type AdminValueOne implements AdminValue {
  type: ValueType!
  one: String
  two: AdminBar
  three: Location
  four: Boolean
}

input AdminValueOneInput {
  type: ValueType!
  one: String
  two: AdminReferenceInput
  three: LocationInput
  four: Boolean
}

type AdminValueList implements AdminValue {
  type: ValueType!
  one: [String!]
  two: [AdminBar!]
  three: [Location!]
  four: [Boolean!]
}

input AdminValueListInput {
  type: ValueType!
  one: [String!]
  two: [AdminReferenceInput!]
  three: [LocationInput!]
  four: [Boolean!]
}

type AdminNestedValue implements AdminValue {
  type: ValueType!
  text: String
  child: AdminNestedValue
}

input AdminNestedValueInput {
  type: ValueType!
  text: String
  childJson: String
  child: AdminNestedValueInput
}

enum _ValueListOrValueOne {
  ValueList
  ValueOne
}

enum _AdminValueListOrValueOne {
  AdminValueList
  AdminValueOne
}

type Query {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]
  adminEntity(id: ID!, version: Int): AdminEntity
  adminEntities(ids: [ID!]!): [AdminEntity]
  adminSearchEntities(query: AdminQueryInput, first: Int, after: String, last: Int, before: String): AdminEntityConnection
  entityHistory(id: ID!): EntityHistory
  publishingHistory(id: ID!): PublishingHistory
}

type Mutation {
  publishEntities(entities: [EntityVersionInput!]!): [EntityPublishPayload!]
  unpublishEntities(ids: [ID!]!): [EntityPublishPayload!]
  archiveEntity(id: ID!): EntityPublishPayload
  unarchiveEntity(id: ID!): EntityPublishPayload
  createFooEntity(entity: AdminFooCreateInput!): AdminFooCreatePayload
  updateFooEntity(entity: AdminFooUpdateInput!): AdminFooUpdatePayload
  upsertFooEntity(entity: AdminFooUpsertInput!): AdminFooUpsertPayload
  createBarEntity(entity: AdminBarCreateInput!): AdminBarCreatePayload
  updateBarEntity(entity: AdminBarUpdateInput!): AdminBarUpdatePayload
  upsertBarEntity(entity: AdminBarUpsertInput!): AdminBarUpsertPayload
}
"
`;
